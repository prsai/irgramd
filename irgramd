#!/usr/bin/env python3
#
# irgramd: IRC-Telegram gateway - Main file
#
# Copyright (c) 2019 Peter Bui <pbui@bx612.space>
# Copyright (c) 2020-2023 E. Bosch <presidev@AT@gmail.com>
#
# Use of this source code is governed by a MIT style license that
# can be found in the LICENSE file included in this project.

import logging
import os
import asyncio

import tornado.options
import tornado.tcpserver
import ssl

# Local modules

from irc import IRCHandler
from telegram import TelegramHandler

# IRC Telegram Daemon

class IRCTelegramd(tornado.tcpserver.TCPServer):
    def __init__(self, logger, settings):
        self.logger     = logger
        effective_port  = settings['irc_port']

        if settings['tls']:
            if not settings['tls_cert']: # error
                self.logger.error('TLS configured but certificate not present')
                exit(1)
            tls_context = ssl.create_default_context(purpose=ssl.Purpose.CLIENT_AUTH)
            tls_context.load_cert_chain(os.path.expanduser(settings['tls_cert']), os.path.expanduser(settings['tls_key']))
            if not effective_port:
                effective_port = 6697
            self.logger.info('TLS configured')
        else:
            tls_context = None
            if not effective_port:
                effective_port = 6667

        tornado.tcpserver.TCPServer.__init__(self, ssl_options=tls_context)

        self.address    = settings['irc_address']
        self.port       = effective_port
        self.irc_handler = None
        self.tg_handler  = None


    async def handle_stream(self, stream, address):
        await self.irc_handler.run(stream, address)

    async def run(self, settings):
        self.listen(self.port, self.address)
        self.logger.info('irgramd listening on %s:%s', self.address, self.port)
        self.irc_handler = IRCHandler(settings)
        self.tg_handler = TelegramHandler(self.irc_handler, settings)
        self.irc_handler.set_telegram(self.tg_handler)
        await self.tg_handler.initialize_telegram()


# Main Execution

if __name__ == '__main__':
    logger = logging.getLogger()
    tornado.options.define('api_hash', default=None, metavar='HASH', help='Telegram API Hash for your account (obtained from https://my.telegram.org/apps)')
    tornado.options.define('api_id', type=int, default=None, metavar='ID', help='Telegram API ID for your account (obtained from https://my.telegram.org/apps)')
    tornado.options.define('ask_code', default=False, help='Ask authentication code (sent by Telegram) in console instead of "code" service command in IRC')
    tornado.options.define('char_in_encoding', default='utf-8', metavar='ENCODING', help='Character input encoding for IRC')
    tornado.options.define('char_out_encoding', default='utf-8', metavar='ENCODING', help='Character output encoding for IRC')
    tornado.options.define('config', default='irgramdrc', metavar='CONFIGFILE', help='Config file absolute or relative to `config_dir` (command line options override it)')
    tornado.options.define('config_dir', default='~/.config/irgramd', metavar='PATH', help='Configuration directory where telegram session info is saved')
    tornado.options.define('emoji_ascii', default=False, help='Replace emoji with ASCII emoticons')
    tornado.options.define('hist_timestamp_format', metavar='DATETIME_FORMAT', help='Format string for timestamps in history, see https://www.strfti.me')
    tornado.options.define('irc_address', default='127.0.0.1', metavar='ADDRESS', help='Address to listen on for IRC')
    tornado.options.define('irc_nicks', type=str, multiple=True, metavar='nick,..', help='List of nicks allowed for IRC, if `pam` and optionally `pam_group` are set, PAM authentication will be used instead')
    tornado.options.define('irc_password', default='', metavar='PASSWORD', help='Password for IRC authentication, if `pam` is set, PAM authentication will be used instead')
    tornado.options.define('irc_port', type=int, default=None, metavar='PORT', help='Port to listen on for IRC. (default 6667, default with TLS 6697)')
    tornado.options.define('media_dir', default=None, metavar='PATH', help='Directory where Telegram media files are downloaded, default "media" in `config_dir`')
    tornado.options.define('media_url', default=None, metavar='BASE_URL', help='Base URL for media files, should be configured in the external (to irgramd) webserver')
    tornado.options.define('pam', default=False, help='Use PAM for IRC authentication, if not set you should set `irc_password`')
    tornado.options.define('pam_group', default=None, metavar='GROUP', help='Unix group allowed if `pam` enabled, if empty any user is allowed')
    tornado.options.define('phone', default=None, metavar='PHONE_NUMBER', help='Phone number associated with the Telegram account to receive the authorization codes if necessary')
    tornado.options.define('quote_length', default=50, metavar='LENGTH', help='Max length of the text quoted in replies and reactions, if longer is truncated')
    tornado.options.define('service_user', default='TelegramServ', metavar='SERVICE_NICK', help='Nick of the service/control user, must be a nick not used by a real Telegram user')
    tornado.options.define('test', default=False, help='Connect to Telegram test environment')
    tornado.options.define('test_datacenter', default=2, metavar='DATACENTER_NUMBER', help='Datacenter to connect to Telegram test environment')
    tornado.options.define('test_host', default=None, metavar='HOST_IP', help='Host to connect to Telegram test environment (default: use a internal table depending on datacenter)')
    tornado.options.define('test_port', default=443, metavar='PORT', help='Port to connect to Telegram test environment')
    tornado.options.define('timezone', default='UTC', metavar='TIMEZONE', help='Timezone to use for dates (timestamps in history, last in dialogs, etc.)')
    tornado.options.define('tls', default=False, help='Use TLS/SSL encrypted connection for IRC server')
    tornado.options.define('tls_cert', default=None, metavar='CERTFILE', help='IRC server certificate chain for TLS/SSL, also can contain private key if not defined with `tls_key`')
    tornado.options.define('tls_key', default=None, metavar='KEYFILE', help='IRC server private key for TLS/SSL')
    # parse cmd line first time to get --config and --config_dir
    tornado.options.parse_command_line()
    config_file = os.path.expanduser(tornado.options.options.config)
    config_dir = os.path.expanduser(tornado.options.options.config_dir)
    if not os.path.exists(config_dir):
        os.makedirs(config_dir)
    logger.info('Configuration Directory: %s', config_dir)

    if not os.path.isabs(config_file):
        config_file = os.path.join(config_dir, config_file)
    if os.path.isfile(config_file):
        logger.info('Using configuration file: %s', config_file)
        tornado.options.parse_config_file(config_file)
    else:
        logger.warning('Configuration file not present, using only command line options and defaults')
    # parse cmd line second time to override file options
    tornado.options.parse_command_line()

    options    = tornado.options.options.as_dict()
    options['config_dir'] = config_dir

    irc_server = IRCTelegramd(logger, options)
    loop = asyncio.new_event_loop()
    loop.run_until_complete(irc_server.run(options))
    loop.run_forever()
