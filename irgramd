#!/usr/bin/env python3

import logging
import os
import asyncio

import tornado.options
import tornado.tcpserver
import ssl

# Local modules

from irc import IRCHandler
from telegram import TelegramHandler

# IRC Telegram Daemon

class IRCTelegramd(tornado.tcpserver.TCPServer):
    def __init__(self, address=None, port=None, config_dir=None, **settings):
        self.logger     = logging.getLogger()
        effective_port  = port

        if settings['tls']:
            if not settings['tls_cert']: # error
                self.logger.error('TLS configured but certificate not present')
                exit(1)
            tls_context = ssl.create_default_context(purpose=ssl.Purpose.CLIENT_AUTH)
            tls_context.load_cert_chain(settings['tls_cert'], settings['tls_key'])
            if not effective_port:
                effective_port = 6697
            self.logger.info('TLS configured')
        else:
            tls_context = None
            if not effective_port:
                effective_port = 6667

        tornado.tcpserver.TCPServer.__init__(self, ssl_options=tls_context)

        self.address    = address or '127.0.0.1'
        self.port       = effective_port
        self.config_dir = config_dir or os.path.expanduser('~/.config/irgramd')
        self.irc_handler = None
        self.tg_handler  = None

        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)

    async def handle_stream(self, stream, address):
        await self.irc_handler.run(stream, address)

    async def run(self):
        self.listen(self.port, self.address)
        self.logger.info('irgramd listening on %s:%s', self.address, self.port)
        self.logger.info('Configuration Directory: %s', self.config_dir)

        self.irc_handler = IRCHandler(self.config_dir)
        self.tg_handler = TelegramHandler(self.irc_handler, self.config_dir)
        self.irc_handler.set_telegram(self.tg_handler)
        await self.tg_handler.initialize_telegram()


# Main Execution

if __name__ == '__main__':
    tornado.options.define('address', default=None, help='Address to listen on.')
    tornado.options.define('port', default=None, help='Port to listen on. (default 6667, default with TLS 6697)')
    tornado.options.define('config_dir', default=None, help='Configuration directory')
    tornado.options.define('tls', default=False, help='Use TLS/SSL encrypted connection for IRC server')
    tornado.options.define('tls_cert', default=None, help='IRC server certificate chain for TLS/SSL, also can contain private key if not defined with `tls_key`')
    tornado.options.define('tls_key', default=None, help='IRC server private key for TLS/SSL')
    tornado.options.parse_command_line()

    options    = tornado.options.options.as_dict()
    irc_server = IRCTelegramd(**options)
    asyncio.get_event_loop().run_until_complete(irc_server.run())
    asyncio.get_event_loop().run_forever()
